//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 
namespace iScrumMaster.Infrastructure.Models
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Silverlight", ConfigurationName="iScrumMaster.Infrastructure.Models.IScrumService", CallbackContract=typeof(iScrumMaster.Infrastructure.Models.IScrumServiceCallback))]
    public interface IScrumService
    {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/Login", ReplyAction="Silverlight/IScrumService/LoginResponse")]
        System.IAsyncResult BeginLogin(string userName, string passcode, System.AsyncCallback callback, object asyncState);
        
        iScrumMaster.Infrastructure.Models.SessionManager EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/Logout", ReplyAction="Silverlight/IScrumService/LogoutResponse")]
        System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState);
        
        bool EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/NotifyMembers", ReplyAction="Silverlight/IScrumService/NotifyMembersResponse")]
        System.IAsyncResult BeginNotifyMembers(iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyMembers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/LoadUsersForProject", ReplyAction="Silverlight/IScrumService/LoadUsersForProjectResponse")]
        System.IAsyncResult BeginLoadUsersForProject(iScrumMaster.Infrastructure.Models.Project project, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> EndLoadUsersForProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/LoadSprintsFromProject", ReplyAction="Silverlight/IScrumService/LoadSprintsFromProjectResponse")]
        System.IAsyncResult BeginLoadSprintsFromProject(iScrumMaster.Infrastructure.Models.Project project, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> EndLoadSprintsFromProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/SaveSprints", ReplyAction="Silverlight/IScrumService/SaveSprintsResponse")]
        System.IAsyncResult BeginSaveSprints(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> sprints, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveSprints(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/LoadProjects", ReplyAction="Silverlight/IScrumService/LoadProjectsResponse")]
        System.IAsyncResult BeginLoadProjects(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> EndLoadProjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/SaveProjects", ReplyAction="Silverlight/IScrumService/SaveProjectsResponse")]
        System.IAsyncResult BeginSaveProjects(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> projects, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveProjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/GetCurrentlyAvailableUsers", ReplyAction="Silverlight/IScrumService/GetCurrentlyAvailableUsersResponse")]
        System.IAsyncResult BeginGetCurrentlyAvailableUsers(iScrumMaster.Infrastructure.Models.User user, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> EndGetCurrentlyAvailableUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IScrumService/SaveUsers", ReplyAction="Silverlight/IScrumService/SaveUsersResponse")]
        System.IAsyncResult BeginSaveUsers(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> users, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveUsers(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScrumServiceCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IScrumService/NotifyAllMembers")]
        void NotifyAllMembers(iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IScrumServiceChannel : iScrumMaster.Infrastructure.Models.IScrumService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public iScrumMaster.Infrastructure.Models.SessionManager Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((iScrumMaster.Infrastructure.Models.SessionManager)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadUsersForProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public LoadUsersForProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadSprintsFromProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public LoadSprintsFromProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveSprintsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public SaveSprintsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public LoadProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public SaveProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentlyAvailableUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public GetCurrentlyAvailableUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public SaveUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public bool Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScrumServiceClient : System.ServiceModel.DuplexClientBase<iScrumMaster.Infrastructure.Models.IScrumService>, iScrumMaster.Infrastructure.Models.IScrumService
    {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginNotifyMembersDelegate;
        
        private EndOperationDelegate onEndNotifyMembersDelegate;
        
        private System.Threading.SendOrPostCallback onNotifyMembersCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadUsersForProjectDelegate;
        
        private EndOperationDelegate onEndLoadUsersForProjectDelegate;
        
        private System.Threading.SendOrPostCallback onLoadUsersForProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadSprintsFromProjectDelegate;
        
        private EndOperationDelegate onEndLoadSprintsFromProjectDelegate;
        
        private System.Threading.SendOrPostCallback onLoadSprintsFromProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveSprintsDelegate;
        
        private EndOperationDelegate onEndSaveSprintsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveSprintsCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadProjectsDelegate;
        
        private EndOperationDelegate onEndLoadProjectsDelegate;
        
        private System.Threading.SendOrPostCallback onLoadProjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveProjectsDelegate;
        
        private EndOperationDelegate onEndSaveProjectsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveProjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentlyAvailableUsersDelegate;
        
        private EndOperationDelegate onEndGetCurrentlyAvailableUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentlyAvailableUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUsersDelegate;
        
        private EndOperationDelegate onEndSaveUsersDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUsersCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ScrumServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance)
        {
        }
        
        public ScrumServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName)
        {
        }
        
        public ScrumServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }
        
        public ScrumServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress)
        {
        }
        
        public ScrumServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public ScrumServiceClient(string endpointConfigurationName) : 
                this(new ScrumServiceClientCallback(), endpointConfigurationName)
        {
        }
        
        private ScrumServiceClient(ScrumServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName)
        {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ScrumServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new ScrumServiceClientCallback(), binding, remoteAddress)
        {
        }
        
        private ScrumServiceClient(ScrumServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public ScrumServiceClient() : 
                this(new ScrumServiceClientCallback())
        {
        }
        
        private ScrumServiceClient(ScrumServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer
        {
            get
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    return httpCookieContainerManager.CookieContainer;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null))
                {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else
                {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<LogoutCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NotifyMembersCompleted;
        
        public event System.EventHandler<LoadUsersForProjectCompletedEventArgs> LoadUsersForProjectCompleted;
        
        public event System.EventHandler<LoadSprintsFromProjectCompletedEventArgs> LoadSprintsFromProjectCompleted;
        
        public event System.EventHandler<SaveSprintsCompletedEventArgs> SaveSprintsCompleted;
        
        public event System.EventHandler<LoadProjectsCompletedEventArgs> LoadProjectsCompleted;
        
        public event System.EventHandler<SaveProjectsCompletedEventArgs> SaveProjectsCompleted;
        
        public event System.EventHandler<GetCurrentlyAvailableUsersCompletedEventArgs> GetCurrentlyAvailableUsersCompleted;
        
        public event System.EventHandler<SaveUsersCompletedEventArgs> SaveUsersCompleted;
        
        public event System.EventHandler<NotifyAllMembersReceivedEventArgs> NotifyAllMembersReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginLogin(string userName, string passcode, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginLogin(userName, passcode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        iScrumMaster.Infrastructure.Models.SessionManager iScrumMaster.Infrastructure.Models.IScrumService.EndLogin(System.IAsyncResult result)
        {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            string userName = ((string)(inValues[0]));
            string passcode = ((string)(inValues[1]));
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginLogin(userName, passcode, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result)
        {
            iScrumMaster.Infrastructure.Models.SessionManager retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state)
        {
            if ((this.LoginCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string userName, string passcode)
        {
            this.LoginAsync(userName, passcode, null);
        }
        
        public void LoginAsync(string userName, string passcode, object userState)
        {
            if ((this.onBeginLoginDelegate == null))
            {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null))
            {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null))
            {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        userName,
                        passcode}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginLogout(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginLogout(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool iScrumMaster.Infrastructure.Models.IScrumService.EndLogout(System.IAsyncResult result)
        {
            return base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginLogout(callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result)
        {
            bool retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndLogout(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogoutCompleted(object state)
        {
            if ((this.LogoutCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync()
        {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState)
        {
            if ((this.onBeginLogoutDelegate == null))
            {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null))
            {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null))
            {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, null, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginNotifyMembers(iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginNotifyMembers(notificationMessage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void iScrumMaster.Infrastructure.Models.IScrumService.EndNotifyMembers(System.IAsyncResult result)
        {
            base.Channel.EndNotifyMembers(result);
        }
        
        private System.IAsyncResult OnBeginNotifyMembers(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage = ((iScrumMaster.Infrastructure.Models.NotificationMessage)(inValues[0]));
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginNotifyMembers(notificationMessage, callback, asyncState);
        }
        
        private object[] OnEndNotifyMembers(System.IAsyncResult result)
        {
            ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndNotifyMembers(result);
            return null;
        }
        
        private void OnNotifyMembersCompleted(object state)
        {
            if ((this.NotifyMembersCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NotifyMembersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NotifyMembersAsync(iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage)
        {
            this.NotifyMembersAsync(notificationMessage, null);
        }
        
        public void NotifyMembersAsync(iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage, object userState)
        {
            if ((this.onBeginNotifyMembersDelegate == null))
            {
                this.onBeginNotifyMembersDelegate = new BeginOperationDelegate(this.OnBeginNotifyMembers);
            }
            if ((this.onEndNotifyMembersDelegate == null))
            {
                this.onEndNotifyMembersDelegate = new EndOperationDelegate(this.OnEndNotifyMembers);
            }
            if ((this.onNotifyMembersCompletedDelegate == null))
            {
                this.onNotifyMembersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNotifyMembersCompleted);
            }
            base.InvokeAsync(this.onBeginNotifyMembersDelegate, new object[] {
                        notificationMessage}, this.onEndNotifyMembersDelegate, this.onNotifyMembersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginLoadUsersForProject(iScrumMaster.Infrastructure.Models.Project project, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginLoadUsersForProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> iScrumMaster.Infrastructure.Models.IScrumService.EndLoadUsersForProject(System.IAsyncResult result)
        {
            return base.Channel.EndLoadUsersForProject(result);
        }
        
        private System.IAsyncResult OnBeginLoadUsersForProject(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            iScrumMaster.Infrastructure.Models.Project project = ((iScrumMaster.Infrastructure.Models.Project)(inValues[0]));
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginLoadUsersForProject(project, callback, asyncState);
        }
        
        private object[] OnEndLoadUsersForProject(System.IAsyncResult result)
        {
            System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndLoadUsersForProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadUsersForProjectCompleted(object state)
        {
            if ((this.LoadUsersForProjectCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadUsersForProjectCompleted(this, new LoadUsersForProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadUsersForProjectAsync(iScrumMaster.Infrastructure.Models.Project project)
        {
            this.LoadUsersForProjectAsync(project, null);
        }
        
        public void LoadUsersForProjectAsync(iScrumMaster.Infrastructure.Models.Project project, object userState)
        {
            if ((this.onBeginLoadUsersForProjectDelegate == null))
            {
                this.onBeginLoadUsersForProjectDelegate = new BeginOperationDelegate(this.OnBeginLoadUsersForProject);
            }
            if ((this.onEndLoadUsersForProjectDelegate == null))
            {
                this.onEndLoadUsersForProjectDelegate = new EndOperationDelegate(this.OnEndLoadUsersForProject);
            }
            if ((this.onLoadUsersForProjectCompletedDelegate == null))
            {
                this.onLoadUsersForProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadUsersForProjectCompleted);
            }
            base.InvokeAsync(this.onBeginLoadUsersForProjectDelegate, new object[] {
                        project}, this.onEndLoadUsersForProjectDelegate, this.onLoadUsersForProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginLoadSprintsFromProject(iScrumMaster.Infrastructure.Models.Project project, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginLoadSprintsFromProject(project, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> iScrumMaster.Infrastructure.Models.IScrumService.EndLoadSprintsFromProject(System.IAsyncResult result)
        {
            return base.Channel.EndLoadSprintsFromProject(result);
        }
        
        private System.IAsyncResult OnBeginLoadSprintsFromProject(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            iScrumMaster.Infrastructure.Models.Project project = ((iScrumMaster.Infrastructure.Models.Project)(inValues[0]));
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginLoadSprintsFromProject(project, callback, asyncState);
        }
        
        private object[] OnEndLoadSprintsFromProject(System.IAsyncResult result)
        {
            System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndLoadSprintsFromProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadSprintsFromProjectCompleted(object state)
        {
            if ((this.LoadSprintsFromProjectCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadSprintsFromProjectCompleted(this, new LoadSprintsFromProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadSprintsFromProjectAsync(iScrumMaster.Infrastructure.Models.Project project)
        {
            this.LoadSprintsFromProjectAsync(project, null);
        }
        
        public void LoadSprintsFromProjectAsync(iScrumMaster.Infrastructure.Models.Project project, object userState)
        {
            if ((this.onBeginLoadSprintsFromProjectDelegate == null))
            {
                this.onBeginLoadSprintsFromProjectDelegate = new BeginOperationDelegate(this.OnBeginLoadSprintsFromProject);
            }
            if ((this.onEndLoadSprintsFromProjectDelegate == null))
            {
                this.onEndLoadSprintsFromProjectDelegate = new EndOperationDelegate(this.OnEndLoadSprintsFromProject);
            }
            if ((this.onLoadSprintsFromProjectCompletedDelegate == null))
            {
                this.onLoadSprintsFromProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadSprintsFromProjectCompleted);
            }
            base.InvokeAsync(this.onBeginLoadSprintsFromProjectDelegate, new object[] {
                        project}, this.onEndLoadSprintsFromProjectDelegate, this.onLoadSprintsFromProjectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginSaveSprints(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> sprints, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSaveSprints(sprints, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool iScrumMaster.Infrastructure.Models.IScrumService.EndSaveSprints(System.IAsyncResult result)
        {
            return base.Channel.EndSaveSprints(result);
        }
        
        private System.IAsyncResult OnBeginSaveSprints(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> sprints = ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint>)(inValues[0]));
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginSaveSprints(sprints, callback, asyncState);
        }
        
        private object[] OnEndSaveSprints(System.IAsyncResult result)
        {
            bool retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndSaveSprints(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveSprintsCompleted(object state)
        {
            if ((this.SaveSprintsCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveSprintsCompleted(this, new SaveSprintsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveSprintsAsync(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> sprints)
        {
            this.SaveSprintsAsync(sprints, null);
        }
        
        public void SaveSprintsAsync(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> sprints, object userState)
        {
            if ((this.onBeginSaveSprintsDelegate == null))
            {
                this.onBeginSaveSprintsDelegate = new BeginOperationDelegate(this.OnBeginSaveSprints);
            }
            if ((this.onEndSaveSprintsDelegate == null))
            {
                this.onEndSaveSprintsDelegate = new EndOperationDelegate(this.OnEndSaveSprints);
            }
            if ((this.onSaveSprintsCompletedDelegate == null))
            {
                this.onSaveSprintsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveSprintsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveSprintsDelegate, new object[] {
                        sprints}, this.onEndSaveSprintsDelegate, this.onSaveSprintsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginLoadProjects(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginLoadProjects(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> iScrumMaster.Infrastructure.Models.IScrumService.EndLoadProjects(System.IAsyncResult result)
        {
            return base.Channel.EndLoadProjects(result);
        }
        
        private System.IAsyncResult OnBeginLoadProjects(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginLoadProjects(callback, asyncState);
        }
        
        private object[] OnEndLoadProjects(System.IAsyncResult result)
        {
            System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndLoadProjects(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoadProjectsCompleted(object state)
        {
            if ((this.LoadProjectsCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadProjectsCompleted(this, new LoadProjectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadProjectsAsync()
        {
            this.LoadProjectsAsync(null);
        }
        
        public void LoadProjectsAsync(object userState)
        {
            if ((this.onBeginLoadProjectsDelegate == null))
            {
                this.onBeginLoadProjectsDelegate = new BeginOperationDelegate(this.OnBeginLoadProjects);
            }
            if ((this.onEndLoadProjectsDelegate == null))
            {
                this.onEndLoadProjectsDelegate = new EndOperationDelegate(this.OnEndLoadProjects);
            }
            if ((this.onLoadProjectsCompletedDelegate == null))
            {
                this.onLoadProjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadProjectsCompleted);
            }
            base.InvokeAsync(this.onBeginLoadProjectsDelegate, null, this.onEndLoadProjectsDelegate, this.onLoadProjectsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginSaveProjects(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> projects, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSaveProjects(projects, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool iScrumMaster.Infrastructure.Models.IScrumService.EndSaveProjects(System.IAsyncResult result)
        {
            return base.Channel.EndSaveProjects(result);
        }
        
        private System.IAsyncResult OnBeginSaveProjects(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> projects = ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project>)(inValues[0]));
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginSaveProjects(projects, callback, asyncState);
        }
        
        private object[] OnEndSaveProjects(System.IAsyncResult result)
        {
            bool retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndSaveProjects(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveProjectsCompleted(object state)
        {
            if ((this.SaveProjectsCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveProjectsCompleted(this, new SaveProjectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveProjectsAsync(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> projects)
        {
            this.SaveProjectsAsync(projects, null);
        }
        
        public void SaveProjectsAsync(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> projects, object userState)
        {
            if ((this.onBeginSaveProjectsDelegate == null))
            {
                this.onBeginSaveProjectsDelegate = new BeginOperationDelegate(this.OnBeginSaveProjects);
            }
            if ((this.onEndSaveProjectsDelegate == null))
            {
                this.onEndSaveProjectsDelegate = new EndOperationDelegate(this.OnEndSaveProjects);
            }
            if ((this.onSaveProjectsCompletedDelegate == null))
            {
                this.onSaveProjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveProjectsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveProjectsDelegate, new object[] {
                        projects}, this.onEndSaveProjectsDelegate, this.onSaveProjectsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginGetCurrentlyAvailableUsers(iScrumMaster.Infrastructure.Models.User user, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetCurrentlyAvailableUsers(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> iScrumMaster.Infrastructure.Models.IScrumService.EndGetCurrentlyAvailableUsers(System.IAsyncResult result)
        {
            return base.Channel.EndGetCurrentlyAvailableUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentlyAvailableUsers(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            iScrumMaster.Infrastructure.Models.User user = ((iScrumMaster.Infrastructure.Models.User)(inValues[0]));
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginGetCurrentlyAvailableUsers(user, callback, asyncState);
        }
        
        private object[] OnEndGetCurrentlyAvailableUsers(System.IAsyncResult result)
        {
            System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndGetCurrentlyAvailableUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentlyAvailableUsersCompleted(object state)
        {
            if ((this.GetCurrentlyAvailableUsersCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentlyAvailableUsersCompleted(this, new GetCurrentlyAvailableUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentlyAvailableUsersAsync(iScrumMaster.Infrastructure.Models.User user)
        {
            this.GetCurrentlyAvailableUsersAsync(user, null);
        }
        
        public void GetCurrentlyAvailableUsersAsync(iScrumMaster.Infrastructure.Models.User user, object userState)
        {
            if ((this.onBeginGetCurrentlyAvailableUsersDelegate == null))
            {
                this.onBeginGetCurrentlyAvailableUsersDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentlyAvailableUsers);
            }
            if ((this.onEndGetCurrentlyAvailableUsersDelegate == null))
            {
                this.onEndGetCurrentlyAvailableUsersDelegate = new EndOperationDelegate(this.OnEndGetCurrentlyAvailableUsers);
            }
            if ((this.onGetCurrentlyAvailableUsersCompletedDelegate == null))
            {
                this.onGetCurrentlyAvailableUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentlyAvailableUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentlyAvailableUsersDelegate, new object[] {
                        user}, this.onEndGetCurrentlyAvailableUsersDelegate, this.onGetCurrentlyAvailableUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult iScrumMaster.Infrastructure.Models.IScrumService.BeginSaveUsers(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> users, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginSaveUsers(users, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool iScrumMaster.Infrastructure.Models.IScrumService.EndSaveUsers(System.IAsyncResult result)
        {
            return base.Channel.EndSaveUsers(result);
        }
        
        private System.IAsyncResult OnBeginSaveUsers(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> users = ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User>)(inValues[0]));
            return ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).BeginSaveUsers(users, callback, asyncState);
        }
        
        private object[] OnEndSaveUsers(System.IAsyncResult result)
        {
            bool retVal = ((iScrumMaster.Infrastructure.Models.IScrumService)(this)).EndSaveUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveUsersCompleted(object state)
        {
            if ((this.SaveUsersCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUsersCompleted(this, new SaveUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUsersAsync(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> users)
        {
            this.SaveUsersAsync(users, null);
        }
        
        public void SaveUsersAsync(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> users, object userState)
        {
            if ((this.onBeginSaveUsersDelegate == null))
            {
                this.onBeginSaveUsersDelegate = new BeginOperationDelegate(this.OnBeginSaveUsers);
            }
            if ((this.onEndSaveUsersDelegate == null))
            {
                this.onEndSaveUsersDelegate = new EndOperationDelegate(this.OnEndSaveUsers);
            }
            if ((this.onSaveUsersCompletedDelegate == null))
            {
                this.onSaveUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUsersCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUsersDelegate, new object[] {
                        users}, this.onEndSaveUsersDelegate, this.onSaveUsersCompletedDelegate, userState);
        }
        
        private void OnNotifyAllMembersReceived(object state)
        {
            if ((this.NotifyAllMembersReceived != null))
            {
                object[] results = ((object[])(state));
                this.NotifyAllMembersReceived(this, new NotifyAllMembersReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents()
        {
            if (((this.useGeneratedCallback != true) 
                        && (this.NotifyAllMembersReceived != null)))
            {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync()
        {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync()
        {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override iScrumMaster.Infrastructure.Models.IScrumService CreateChannel()
        {
            return new ScrumServiceClientChannel(this);
        }
        
        private class ScrumServiceClientCallback : object, IScrumServiceCallback
        {
            
            private ScrumServiceClient proxy;
            
            public void Initialize(ScrumServiceClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void NotifyAllMembers(iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage)
            {
                this.proxy.OnNotifyAllMembersReceived(new object[] {
                            notificationMessage});
            }
        }
        
        private class ScrumServiceClientChannel : ChannelBase<iScrumMaster.Infrastructure.Models.IScrumService>, iScrumMaster.Infrastructure.Models.IScrumService
        {
            
            public ScrumServiceClientChannel(System.ServiceModel.DuplexClientBase<iScrumMaster.Infrastructure.Models.IScrumService> client) : 
                    base(client)
            {
            }
            
            public System.IAsyncResult BeginLogin(string userName, string passcode, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = passcode;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public iScrumMaster.Infrastructure.Models.SessionManager EndLogin(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                iScrumMaster.Infrastructure.Models.SessionManager _result = ((iScrumMaster.Infrastructure.Models.SessionManager)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Logout", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndLogout(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Logout", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNotifyMembers(iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = notificationMessage;
                System.IAsyncResult _result = base.BeginInvoke("NotifyMembers", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNotifyMembers(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                base.EndInvoke("NotifyMembers", _args, result);
            }
            
            public System.IAsyncResult BeginLoadUsersForProject(iScrumMaster.Infrastructure.Models.Project project, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = project;
                System.IAsyncResult _result = base.BeginInvoke("LoadUsersForProject", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> EndLoadUsersForProject(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> _result = ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User>)(base.EndInvoke("LoadUsersForProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadSprintsFromProject(iScrumMaster.Infrastructure.Models.Project project, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = project;
                System.IAsyncResult _result = base.BeginInvoke("LoadSprintsFromProject", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> EndLoadSprintsFromProject(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> _result = ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint>)(base.EndInvoke("LoadSprintsFromProject", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveSprints(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Sprint> sprints, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = sprints;
                System.IAsyncResult _result = base.BeginInvoke("SaveSprints", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSaveSprints(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SaveSprints", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoadProjects(System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("LoadProjects", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> EndLoadProjects(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> _result = ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project>)(base.EndInvoke("LoadProjects", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveProjects(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.Project> projects, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = projects;
                System.IAsyncResult _result = base.BeginInvoke("SaveProjects", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSaveProjects(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SaveProjects", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCurrentlyAvailableUsers(iScrumMaster.Infrastructure.Models.User user, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentlyAvailableUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> EndGetCurrentlyAvailableUsers(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> _result = ((System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User>)(base.EndInvoke("GetCurrentlyAvailableUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveUsers(System.Collections.Generic.List<iScrumMaster.Infrastructure.Models.User> users, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = users;
                System.IAsyncResult _result = base.BeginInvoke("SaveUsers", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSaveUsers(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SaveUsers", _args, result)));
                return _result;
            }
        }
    }
    
    public class NotifyAllMembersReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public NotifyAllMembersReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public iScrumMaster.Infrastructure.Models.NotificationMessage notificationMessage
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((iScrumMaster.Infrastructure.Models.NotificationMessage)(this.results[0]));
            }
        }
    }
}
